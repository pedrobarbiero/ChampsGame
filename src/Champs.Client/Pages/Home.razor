@using Champs.Shared
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration


@page "/"
@if (_readyToPlay)
{
    <p>Use the arrow keys to move</p>
}
else
{
    <h1>Connecting...</h1>
    <span>Please wait until server warm up. If takes too long please refresh the page.</span>
}
<div id="canvasHolder" style="border: 10px solid #ccc;width: 400px; height: 400px">
    <BECanvas Width="400" Height="400" @ref="_canvasReference"></BECanvas>
</div>
<div>
    <table>
        <tr>
            <th>Player</th>
            <th>Score</th>
        </tr>
        @if (_state is not null)
        {
            foreach (var player in _state.Players.Values.OrderByDescending(p => p.Score))
            {
                var rowStyle = player.Id == _currentPlayerId ? "background-color:blue; color:white" : "";
                <tr style="@rowStyle">
                    <td>@player.Id</td>
                    <td>@player.Score</td>
                </tr>
            }
        }
    </table>
</div>

@code {
    private string _hubUrl = null!;
    private HubConnection _hubConnection = null!;
    private Canvas2DContext _context = null!;
    protected BECanvasComponent _canvasReference = null!;
    private string _currentPlayerId = null!;
    private bool _readyToPlay = false;
    private StateDto? _state;
    public async Task ConnectToHub()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();

        _hubConnection.On<StateDto>("Broadcast", async (state) =>
        {
            _state = state;
            await Draw(state);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
        _currentPlayerId = _hubConnection.ConnectionId ?? throw new InvalidOperationException("ConnectionId is null");
        _readyToPlay = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var url = Configuration["ServerURL"] ?? throw new InvalidOperationException("ServerURL is null");
        _hubUrl = $"{url}/Game";
        await ConnectToHub();
    }


    private async Task MovePlayer(Direction direction)
    {
        await _hubConnection.SendAsync("MovePlayer", _currentPlayerId, direction);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvasReference.CreateCanvas2DAsync();

        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addKeyDownEventListener");
            GlobalKeyListener.KeyDownObservers.Add(async (key) =>
            {
                Direction? direction = key switch
                {
                    "ArrowUp" => Direction.Up,
                    "ArrowDown" => Direction.Down,
                    "ArrowLeft" => Direction.Left,
                    "ArrowRight" => Direction.Right,
                    _ => null
                };
                if (direction is not null)
                    await MovePlayer(direction.Value);
            });
        }
    }

    const double multiplier = 40;
    private (double, double, double, double) Scale(double x, double y, double width, double height) =>
    (x * multiplier, y * multiplier, width * multiplier, height * multiplier);

    private async Task FillRectAsync(double x, double y, double width, double height)
    {
        var (scaledX, scaledY, scaledWidth, scaledHeight) = Scale(x, y, width, height);
        await _context.FillRectAsync(scaledX, scaledY, scaledWidth, scaledHeight);
    }

    private async Task FillRectAsync(double x, double y)
    {
        await FillRectAsync(x, y, 1, 1);
    }

    private async Task Draw(StateDto state)
    {
        await _context.ClearRectAsync(0, 0, 10, 10);
        await _context.SetFillStyleAsync("white");
        await FillRectAsync(0, 0, 10, 10);

        await Draw(state.Players);
        await DrawFake(state.FakeFruits);
        await Draw(state.Fruits);
    }

    private async Task Draw(IReadOnlyDictionary<string, Player> players)
    {
        await _context.SetFillStyleAsync("#888888");
        foreach (KeyValuePair<string, Player> entry in players)
        {
            if (entry.Key != _currentPlayerId)
                await FillRectAsync(entry.Value.X, entry.Value.Y);
        }
        await _context.SetFillStyleAsync("#0000FF");
        var currentPlayer = players[_currentPlayerId];
        await FillRectAsync(currentPlayer.X, currentPlayer.Y);
    }

    private async Task Draw(IReadOnlyDictionary<string, Fruit> fruits)
    {
        await _context.SetFillStyleAsync("#005500");
        foreach (KeyValuePair<string, Fruit> entry in fruits)
        {
            await FillRectAsync(entry.Value.X, entry.Value.Y);
        }
    }

    private async Task DrawFake(IEnumerable<Fruit> fruits)
    {
        await _context.SetFillStyleAsync("#009900");
        foreach (var fruit in fruits)
        {
            await FillRectAsync(fruit.X, fruit.Y);
        }
    }

}
