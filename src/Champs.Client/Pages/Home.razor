@using Champs.Shared
@using Microsoft.AspNetCore.SignalR.Client

@inject IJSRuntime JSRuntime

@page "/"
<PageTitle>Champs Game</PageTitle>
<div id="canvasHolder" style="border: 10px solid #ccc;width: 400px; height: 400px">
    <BECanvas Width="400" Height="400" @ref="_canvasReference"></BECanvas>
</div>

@code {
    private string _hubUrl = "http://localhost:5185/game";
    private HubConnection _hubConnection = null!;

    public async Task ConnectToHub()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();

        _hubConnection.On<GameState>("Broadcast", async (state) =>
        {
            Console.WriteLine("Received game state");
            Console.WriteLine($"state: {state}");
            await Draw(state);
        });

        await _hubConnection.StartAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await ConnectToHub();
    }

    private async Task MovePlayer(Direction direction)
    {
        await _hubConnection.SendAsync("MovePlayer", _currentPlayerId, direction);
    }

    private async Task ConnectPlayer()
    {
        await _hubConnection.SendAsync("ConnectPlayer", _currentPlayerId);
    }

    private async Task DisconnectFromHub()
    {
        await _hubConnection.StopAsync();
        await _hubConnection.DisposeAsync();
    }


    private Canvas2DContext _context = null!;
    protected BECanvasComponent _canvasReference = null!;
    private string _currentPlayerId = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvasReference.CreateCanvas2DAsync();

        if (firstRender)
        {
            _currentPlayerId = Guid.NewGuid().ToString();
            await ConnectPlayer();
            await JSRuntime.InvokeVoidAsync("addKeyDownEventListener");
            GlobalKeyListener.KeyDownObservers.Add(async (key) =>
            {
                Direction? direction = key switch
                {
                    "ArrowUp" => Direction.Up,
                    "ArrowDown" => Direction.Down,
                    "ArrowLeft" => Direction.Left,
                    "ArrowRight" => Direction.Right,
                    _ => null
                };
                if (direction is not null)
                    await MovePlayer(direction.Value);
            });
        }
    }

    const double multiplier = 40;
    private (double, double, double, double) Scale(double x, double y, double width, double height) =>
    (x * multiplier, y * multiplier, width * multiplier, height * multiplier);

    private async Task FillRectAsync(double x, double y, double width, double height)
    {
        var (scaledX, scaledY, scaledWidth, scaledHeight) = Scale(x, y, width, height);
        await _context.FillRectAsync(scaledX, scaledY, scaledWidth, scaledHeight);
    }

    private async Task FillRectAsync(double x, double y)
    {
        await FillRectAsync(x, y, 1, 1);
    }

    private async Task Draw(GameState _gameState)
    {
        Console.WriteLine("Drawing game state");
        await _context.ClearRectAsync(0, 0, 10, 10);
        await _context.SetFillStyleAsync("white");
        await FillRectAsync(0, 0, 10, 10);

        await Draw(_gameState.Players);
        await Draw(_gameState.Fruits);
    }

    private async Task Draw(IReadOnlyDictionary<string, Player> players)
    {
        Console.WriteLine("Drawing players");
        await _context.SetFillStyleAsync("#888888");
        foreach (KeyValuePair<string, Player> entry in players)
        {
            Console.WriteLine(entry.Key);
            if (entry.Key != _currentPlayerId)
                await FillRectAsync(entry.Value.X, entry.Value.Y);
        }
        await _context.SetFillStyleAsync("blue");
        var currentPlayer = players[_currentPlayerId];
        await FillRectAsync(currentPlayer.X, currentPlayer.Y);
    }

    private async Task Draw(IReadOnlyDictionary<string, Fruit> fruits)
    {
        Console.WriteLine("Drawing fruits");
        await _context.SetFillStyleAsync("green");
        foreach (KeyValuePair<string, Fruit> entry in fruits)
        {
            Console.WriteLine(entry.Key);
            await FillRectAsync(entry.Value.X, entry.Value.Y);
        }
    }


}
