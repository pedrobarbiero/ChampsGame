@inject IJSRuntime JSRuntime

@page "/"
<PageTitle>Champs Game</PageTitle>
<div id="canvasHolder" style="border: 10px solid #ccc;width: 400px; height: 400px">
    <BECanvas Width="400" Height="400" @ref="_canvasReference"></BECanvas>
</div>

@code {
    private Canvas2DContext _context = null!;
    protected BECanvasComponent _canvasReference = null!;
    private GameState _gameState = null!;
    private string _currentPlayerId = "1";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("OnAfterRenderAsync");
        var game = new Game();
        _gameState = game.State;
        _context = await _canvasReference.CreateCanvas2DAsync();

        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addKeyDownEventListener");
            GlobalKeyListener.KeyDownObservers.Add(async (key) =>
            {
                var direction = key switch
                {
                    "ArrowUp" => Direction.Up,
                    "ArrowDown" => Direction.Down,
                    "ArrowLeft" => Direction.Left,
                    "ArrowRight" => Direction.Right,
                    _ => throw new NotImplementedException()
                };
                game.MovePlayer(_currentPlayerId, direction);
                await Draw(); // Todo: notify
            });
        }
        await Draw();
    }

    const double multiplier = 40;
    private (double, double, double, double) Scale(double x, double y, double width, double height) =>
    (x * multiplier, y * multiplier, width * multiplier, height * multiplier);

    private async Task FillRectAsync(double x, double y, double width, double height)
    {
        var (scaledX, scaledY, scaledWidth, scaledHeight) = Scale(x, y, width, height);
        await _context.FillRectAsync(scaledX, scaledY, scaledWidth, scaledHeight);
    }

    private async Task FillRectAsync(double x, double y)
    {
        await FillRectAsync(x, y, 1, 1);
    }

    private async Task Draw()
    {
        await _context.ClearRectAsync(0, 0, 10, 10);
        await _context.SetFillStyleAsync("white");
        await FillRectAsync(0, 0, 10, 10);

        await DrawPlayers();
        await DrawFruits();
    }

    private async Task DrawPlayers()
    {
        await _context.SetFillStyleAsync("#888888");
        foreach (KeyValuePair<string, Player> entry in _gameState.Players)
        {
            if (entry.Key != _currentPlayerId)
                await FillRectAsync(entry.Value.X, entry.Value.Y);
        }
        await _context.SetFillStyleAsync("blue");
        var currentPlayer = _gameState.Players[_currentPlayerId];
        await FillRectAsync(currentPlayer.X, currentPlayer.Y);
    }

    private async Task DrawFruits()
    {
        await _context.SetFillStyleAsync("green");
        foreach (KeyValuePair<string, Fruit> entry in _gameState.Fruits)
        {
            await FillRectAsync(entry.Value.X, entry.Value.Y);
        }
    }

    public class Game
    {
        public Game()
        {
            State = new GameState(
                new Dictionary<string, Player>() {
                    { "1", new() { Name = "1", X = 1, Y = 1 } },
                    { "2", new() { Name = "2", X = 2, Y = 2 } },
                    { "3", new() { Name = "3", X = 3, Y = 3 } }
                    },
                new Dictionary<string, Fruit>() {
                    { "1", new() { X = 5, Y = 5 } },
                    { "2", new() { X = 6, Y = 6 } },
                    { "3", new() { X = 7, Y = 5 } }
                },
                new() { Width = 10, Height = 10 }

            );
        }
        public GameState State { get; private set; }
        public void MovePlayer(string playerId, Direction direction)
        {
            var player = State.Players[playerId];
            Console.WriteLine($"MovePlayer {playerId} {direction}");
            if (direction == Direction.Up && player.Y > 0)
            {
                player.Y--;
            }
            else if (direction == Direction.Down && player.Y < State.Board.Height - 1)
            {
                player.Y++;
            }
            else if (direction == Direction.Left && player.X > 0)
            {
                player.X--;
            }
            else if (direction == Direction.Right && player.X < State.Board.Width - 1)
            {
                player.X++;
            }
            PickFruitIfCollide(playerId);
        }

        private void PickFruitIfCollide(string playerId)
        {
            var player = State.Players[playerId];
            foreach (KeyValuePair<string, Fruit> entry in State.Fruits)
            {
                if (PlayerAndFruitCollided(player, entry.Value))
                {
                    State.RemoveFruit(entry.Key);
                    break;
                }
            }
        }

        private bool PlayerAndFruitCollided(Player player, Fruit fruit) =>
            player.X == fruit.X && player.Y == fruit.Y;
        
    }

    public enum Direction
    {
        Up,
        Down,
        Left,
        Right
    }
}
